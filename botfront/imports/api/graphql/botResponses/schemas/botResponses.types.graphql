type Query {
    botResponses(projectId: String!): [BotResponse!]
    botResponse(projectId: String!, key: String!, lang: String): BotResponse
}

type Mutation {
  deleteResponse(projectId: String!, key: String!): updateResponse!
  updateResponse(projectId: String!, key: String!, response: BotResponseInput): updateResponse!
  createResponse(projectId: String!, response: BotResponseInput): updateResponse!
}

type updateResponse {
  success: Boolean!
}

type BotResponse {
  key: String
  _id: String
  projectId: String
  values: [Value]
  match: Match
  followUp: FollowUp
}

type Value {
  lang: String
  sequence: [ContentContainer]
}

type ContentContainer {
  content: String
}

type FollowUp {
  action: String
  delay: Float
}

type Match {
  nlu: [Nlu]
}

type Nlu {
  intent: String
  entities: [Entity]
}

type Entity {
  entity: String
  value: String
}

#Input types
input BotResponseInput {
  key: String
  _id: String
  projectId: String
  values: [ValueInput]
  match: MatchInput
  followUp: FollowUpInput
}

input ValueInput {
  lang: String
  sequence: [ContentContainerInput]
}

input ContentContainerInput {
  content: String
}

input FollowUpInput {
  action: String
  delay: Float
}

input MatchInput {
  nlu: [NluInput]
}

input NluInput {
  intent: String
  entities: [EntityInput]
}

input EntityInput {
  entity: String
  value: String
}


