type Query {
    conversationsPage(
        
        projectId: String!, 
        """ Page requested (1 if you want all results)"""
        page: Int,
        """ The number of conversations per page (-1 for all results in one page) """
        pageSize: Int,
        """ filter conversations by status (default ["new", "read", "flagged"]) """
        status: [String] = ["new", "read", "flagged"]
        """ (default "development", possible other values are "production" and "staging")"""
        env: String
        """ Sorting order (default updatedAt_DESC (most recent first), possible other value updatedAt_ASC(most recent last)"""
        sort: order = updatedAt_DESC #in the future if needed to sort on multiple fields passing and array of orders, and modifying the datasource(mongo/conversation.js) accordingly might to the trick
        """ filter by length of conversation, value for the length filter go with the comparator field xThanLength """
        lengthFilter: Int
        """comparison operator for the lengthFilter (one of greaterThan, lessThan, equals)"""
        xThanLength: compare
        """filter by confidence of predicted intents (between 0 and 1)"""
        confidenceFilter: Float
        """ comparison operator for the confidenceFilter (one of greaterThan, lessThan, equals) """
        xThanConfidence: compare
        """ filter conversations by actions, goes with operatorActionsFilters"""
        actionFilters: [String]
        """ keep the conversations after this date using the format ISO 8601 (AAAA-MM-JJThh:mm:ssZ) """
        startDate: String
        """ keep the conversations before this date using the format ISO 8601 (AAAA-MM-JJThh:mm:ssZ) """
        endDate: String
        """ unique identifier of the user"""
        userId: String
        """ String (default ‘or’, possible other value ‘and’) type of filtering for action  filters """
        operatorActionsFilters: String,
        """ SString (default ‘or’, possible other value ‘and') type of filtering for intent filters """
        operatorIntentsFilters: String,
        """ filter conversation containing the listed intents  goes with operatorIntentsFilters """
        intentFilters: [String]
    ): Pagination
    conversation(projectId: String!, id: String!): ConversationContainer!
    intentsInConversations(projectId: String!): [String]
}

enum order {
    updatedAt_ASC
    updatedAt_DESC
}

enum compare {
    greaterThan
    lessThan
    equals
}

type Mutation {
    markAsRead(id: String!): updateResponse!
    updateStatus(id: String!, status: String): updateResponse!
    delete(id: String!): updateResponse!
}

type updateResponse {
    success: Boolean!
}

type Pagination {
    conversations: [ConversationContainer!]!
    pages: Int
}

type ConversationContainer {
    tracker: Any
    userId: String
    projectId: String
    status: String
    _id: String
    updatedAt: String
}

type Entity {
    entity: String,
    value: String,
    start: Int,
    end: Int,
    confidence: Float,
    extractor: String,
    processors: [String],
}

input EntityInput {
    entity: String,
    value: String,
    start: Int,
    end: Int,
    confidence: Float,
    extractor: String,
    processors: [String],
}

type Intent {
    confidence: Float
    name: String
}

input IntentInput {
    confidence: Float,
    name: String,
}
